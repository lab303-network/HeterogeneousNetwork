package com.tool;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.TooManyListenersException;

import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.NoSuchPortException;
import gnu.io.PortInUseException;
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent;
import gnu.io.SerialPortEventListener;
import gnu.io.UnsupportedCommOperationException;

public class SeialProcess{
	private static SeialProcess serialTool = null;
	
	static {
		//在该类被ClassLoader加载时就初始化一个SerialTool对象
		if (serialTool == null) {
			serialTool = new SeialProcess();
		}
	}

	//私有化SerialTool类的构造方法，不允许其他类生成SerialTool对象
	private SeialProcess() {
		
	}    

	/**
	 * 获取提供服务的SerialTool对象
	 * @return serialTool
	 */
	public static SeialProcess getSerialTool() {
		if (serialTool == null) {
			serialTool = new SeialProcess();
		}
		return serialTool;
	}


	/**
	 * 查找所有可用端口
	 * @return 可用端口名称列表
	 */
	public static final ArrayList<String> findPort() {

		//获得当前所有可用串口
		Enumeration<CommPortIdentifier> portList = CommPortIdentifier.getPortIdentifiers();    

		ArrayList<String> portNameList = new ArrayList<>();

		//将可用串口名添加到List并返回该List
		while (portList.hasMoreElements()) {
			String portName = portList.nextElement().getName();
			portNameList.add(portName);
		}

		return portNameList;
	}

	/**
	 * 打开串口
	 * @param portName 端口名称
	 * @param baudrate 波特率
	 * @return 串口对象
	 * @throws SerialPortParameterFailure 设置串口参数失败
	 * @throws NotASerialPort 端口指向设备不是串口类型
	 * @throws NoSuchPort 没有该端口对应的串口设备
	 * @throws PortInUse 端口已被占用
	 */
	public static final SerialPort openPort(String portName, int baudrate)  {


		//通过端口名识别端口
		CommPortIdentifier portIdentifier;
		try {
			portIdentifier = CommPortIdentifier.getPortIdentifier(portName);

			//打开端口，并给端口名字和一个timeout（打开操作的超时时间）
			CommPort commPort = portIdentifier.open(portName, 2000);

			//判断是不是串口
			if (commPort instanceof SerialPort) {

				SerialPort serialPort = (SerialPort) commPort;

				//设置一下串口的波特率等参数
				serialPort.setSerialPortParams(baudrate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);                              

				System.out.println("Open " + portName + " sucessfully !");
				return serialPort;
			}
		} catch (NoSuchPortException | PortInUseException | UnsupportedCommOperationException e) {
			// TODO Auto-generated catch block
			System.out.println(portName+"正被占用");
			e.printStackTrace();
		}
		return null;		
	}

	/**
	 * 往串口发送数据
	 * @param serialPort 串口对象
	 * @param order    待发送数据
	 * @throws SendDataToSerialPortFailure 向串口发送数据失败
	 * @throws SerialPortOutputStreamCloseFailure 关闭串口对象的输出流出错
	 */
	public static void sendToPort(SerialPort serialPort, byte[] order) {

		OutputStream out = null;
		try {
			out = serialPort.getOutputStream();
			out.write(order);
			out.flush();
			System.out.println("Data Sent");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			try {
				out.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	/**
	 * 关闭串口
	 * @param serialport 待关闭的串口对象
	 */
	public static void closePort(SerialPort serialPort) {
		if (serialPort != null) {
			serialPort.close();
			serialPort = null;
		}
	}

	/**
	 * 从串口读取数据
	 * @param serialPort 当前已建立连接的SerialPort对象
	 * @return 读取到的数据
	 * @throws ReadDataFromSerialPortFailure 从串口读取数据时出错
	 * @throws SerialPortInputStreamCloseFailure 关闭串口对象输入流出错
	 */
	public static byte[] readFromPort(SerialPort serialPort)  {

		InputStream in = null;
		byte[] bytes = null;

		try {
			while(true) {
				in = serialPort.getInputStream();
				int bufflenth = in.available();        //获取buffer里的数据长度

				while (bufflenth != 0) {                             
					bytes = new byte[bufflenth];    //初始化byte数组为buffer中数据的长度
					in.read(bytes);
					bufflenth = in.available();
				} 
				if (bytes != null )
				{
					System.out.println(new String(bytes));
				}else {
					continue;
				}
				Thread.sleep(1000);
			}
		} catch (IOException | InterruptedException e) {
			e.printStackTrace();
		}

		return bytes;

	}
}




